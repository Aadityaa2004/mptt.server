services:
  # MQTT Broker (Mosquitto)
  mosquitto:
    build: ./src/production/MQT.Mosquitto
    container_name: mqtt-broker
    ports:
      - "1883:1883"        # MQTT (dev)
      - "8883:8883"        # MQTT with TLS (prod)
      - "9001:9001"        # WebSocket (dev)
      - "9443:9443"        # WebSocket with TLS (prod)
    volumes:
      - mosq-data:/mosquitto/data
      - mosq-logs:/mosquitto/log
    environment:
      - TZ=Etc/UTC
    restart: unless-stopped
    networks:
      - mqtt-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgresql
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=iot_user
      - POSTGRES_PASSWORD=iot_password
      - POSTGRES_DB=iot
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iot_user -d iot"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - mqtt-network

  # MQTT Bridge - Forwards messages from external broker to local broker
  mqtt-bridge:
    build: ./src/production/MQT.Bridge
    container_name: mqtt-bridge
    depends_on:
      mosquitto:
        condition: service_healthy
    environment:
      # External Broker Configuration (where your RPi sensors connect)
      - EXTERNAL_BROKER_HOST=172.24.131.97
      - EXTERNAL_BROKER_PORT=1883
      - EXTERNAL_BROKER_USER=${EXTERNAL_BROKER_USER:-}
      - EXTERNAL_BROKER_PASS=${EXTERNAL_BROKER_PASS:-}
      
      # Local Broker Configuration (Docker Mosquitto)
      - LOCAL_BROKER_HOST=mosquitto
      - LOCAL_BROKER_PORT=1883
      - LOCAL_BROKER_USER=${LOCAL_BROKER_USER:-}
      - LOCAL_BROKER_PASS=${LOCAL_BROKER_PASS:-}
      
      # Topic Configuration
      - TOPIC_FILTER=${TOPIC_FILTER:-sensors/#}
      
      # Timezone
      - TZ=Etc/UTC
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; socket.create_connection(('mosquitto', 1883), timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - mqtt-network

  # MQTT Ingestor Service - Standalone data ingestion
  mqtt-ingestor:
    build:
      context: .
      dockerfile: ./src/production/MQT.IngestorService/Dockerfile
    container_name: mqtt-ingestor
    depends_on:
      - mosquitto
      - api-service
    ports:
      - "9003:9003"        # Health check endpoint
    environment:
      # Health Server
      - INGESTOR_PORT=9003
      
      # API Service Configuration
      - API_SERVICE_URL=http://api-service:9002
      - INTERNAL_API_SECRET=secret-key-for-service-auth
      
      # MQTT Broker Configuration (Dev)
      - BROKER_HOST=mosquitto
      - BROKER_PORT=1883
      - BROKER_TLS=false
      - BROKER_USER=
      - BROKER_PASS=
      - BROKER_CA_FILE=
      
      # MQTT Subscription Configuration
      - MQTT_TOPIC=sensors/#
      - MQTT_CLIENT_ID=mqtt-ingestor-1
      - MQTT_SHARED_GROUP=
      
      # Batch Processing Configuration
      - BATCH_SIZE=200
      - BATCH_WINDOW=1s
      
      # Timezone
      - TZ=Etc/UTC
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - mqtt-network

  # API Service - REST API with authentication
  api-service:
    build:
      context: .
      dockerfile: ./src/production/MQT.ApiService/Dockerfile
    container_name: api-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "9002:9002"        # HTTP API endpoint
    environment:
      # HTTP Server
      - PORT=9002
      
      # PostgreSQL Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=iot_user
      - POSTGRES_PASSWORD=iot_password
      - POSTGRES_DB=iot
      - POSTGRES_SSLMODE=disable
      
      # Service-to-Service Authentication
      - INTERNAL_API_SECRET=secret-key-for-service-auth
      
      # Auth Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-this-secret-in-production}
      - JWT_ISSUER=mpt-api-service
      - JWT_ACCESS_TOKEN_DURATION=24h
      - JWT_REFRESH_TOKEN_DURATION=168h
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-adminpassword123}
      
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      - CORS_ALLOWED_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
      - CORS_ALLOWED_HEADERS=Origin,Content-Type,Accept,Authorization,token
      - CORS_EXPOSED_HEADERS=Content-Length
      - CORS_ALLOW_CREDENTIALS=true
      - CORS_MAX_AGE=43200
      
      # Timezone
      - TZ=Etc/UTC
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - mqtt-network


  # Optional: MQTT Explorer for testing (development only)
  mqtt-explorer:
    image: smeagolworms4/mqtt-explorer
    container_name: mqtt-explorer
    ports:
      - "4000:4000"
    environment:
      - MQTT_EXPLORER_HOST=mosquitto
      - MQTT_EXPLORER_PORT=1883
    depends_on:
      - mosquitto
    restart: unless-stopped
    networks:
      - mqtt-network
    profiles:
      - dev

  # PostgreSQL Admin (pgAdmin) - Web-based database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - mqtt-network
    profiles:
      - dev

volumes:
  mosq-data:
    driver: local
  mosq-logs:
    driver: local
  postgres-data:
    driver: local

networks:
  mqtt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
