{
	"info": {
		"_postman_id": "mqtt-server-api",
		"name": "MQTT Server API",
		"description": "Complete REST API for MQTT IoT Server with User, Pi, Device, and Reading management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Core Endpoints",
			"item": [
				{
					"name": "Health Live",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/live",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								"live"
							]
						},
						"description": "Liveness probe - checks if container is up"
					},
					"response": []
				},
				{
					"name": "Health Ready",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/ready",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								"ready"
							]
						},
						"description": "Readiness check - verifies DB and MQTT connectivity"
					},
					"response": []
				},
				{
					"name": "Metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/metrics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"metrics"
							]
						},
						"description": "Prometheus metrics endpoint"
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"user_001\",\n  \"name\": \"John Doe\",\n  \"role\": \"admin\",\n  \"meta\": {\n    \"department\": \"IT\",\n    \"location\": \"New York\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a new user"
					},
					"response": []
				},
				{
					"name": "List Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users?page=1&page_size=10&role=admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "role",
									"value": "admin",
									"description": "Optional: filter by role"
								}
							]
						},
						"description": "List users with pagination and optional role filtering"
					},
					"response": []
				},
				{
					"name": "Get User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "Get a specific user by ID"
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Smith\",\n  \"role\": \"user\",\n  \"meta\": {\n    \"department\": \"Engineering\",\n    \"location\": \"San Francisco\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "Update user information (partial update)"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}?hard=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "hard",
									"value": "false",
									"description": "true for hard delete, false for soft delete"
								}
							]
						},
						"description": "Delete a user (soft delete by default)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Pis (Gateways)",
			"item": [
				{
					"name": "Create Pi",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pi_id\": \"pi_001\",\n  \"user_id\": \"user_001\",\n  \"meta\": {\n    \"location\": \"Building A, Floor 1\",\n    \"firmware_version\": \"1.2.3\",\n    \"last_seen\": \"2024-01-15T10:30:00Z\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/pis",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis"
							]
						},
						"description": "Register a new Raspberry Pi (idempotent upsert)"
					},
					"response": []
				},
				{
					"name": "List Pis",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pis?user_id={{user_id}}&page=1&page_size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}",
									"description": "Optional: filter by user"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						},
						"description": "List Pis with pagination and optional user filtering"
					},
					"response": []
				},
				{
					"name": "Get Pi",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pis/{{pi_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis",
								"{{pi_id}}"
							]
						},
						"description": "Get a specific Pi by ID"
					},
					"response": []
				},
				{
					"name": "Update Pi",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"user_002\",\n  \"meta\": {\n    \"location\": \"Building B, Floor 2\",\n    \"firmware_version\": \"1.3.0\",\n    \"last_seen\": \"2024-01-15T15:45:00Z\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/pis/{{pi_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis",
								"{{pi_id}}"
							]
						},
						"description": "Update Pi information (partial update)"
					},
					"response": []
				},
				{
					"name": "Delete Pi",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pis/{{pi_id}}?cascade=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis",
								"{{pi_id}}"
							],
							"query": [
								{
									"key": "cascade",
									"value": "false",
									"description": "true to delete associated devices and readings"
								}
							]
						},
						"description": "Delete a Pi (with optional cascade deletion)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Devices",
			"item": [
				{
					"name": "Create Device",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"device_id\": 1,\n  \"device_type\": \"temperature\",\n  \"meta\": {\n    \"model\": \"DHT22\",\n    \"calibration_offset\": 0.5,\n    \"unit\": \"celsius\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/pis/{{pi_id}}/devices",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis",
								"{{pi_id}}",
								"devices"
							]
						},
						"description": "Register a device on a specific Pi (idempotent upsert)"
					},
					"response": []
				},
				{
					"name": "List Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pis/{{pi_id}}/devices?page=1&page_size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis",
								"{{pi_id}}",
								"devices"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						},
						"description": "List devices under a specific Pi"
					},
					"response": []
				},
				{
					"name": "Get Device",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pis/{{pi_id}}/devices/{{device_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis",
								"{{pi_id}}",
								"devices",
								"{{device_id}}"
							]
						},
						"description": "Get a specific device"
					},
					"response": []
				},
				{
					"name": "Update Device",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"meta\": {\n    \"model\": \"DHT22\",\n    \"calibration_offset\": 1.0,\n    \"unit\": \"fahrenheit\",\n    \"threshold_min\": 20,\n    \"threshold_max\": 30\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/pis/{{pi_id}}/devices/{{device_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis",
								"{{pi_id}}",
								"devices",
								"{{device_id}}"
							]
						},
						"description": "Update device metadata"
					},
					"response": []
				},
				{
					"name": "Delete Device",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/pis/{{pi_id}}/devices/{{device_id}}?cascade=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"pis",
								"{{pi_id}}",
								"devices",
								"{{device_id}}"
							],
							"query": [
								{
									"key": "cascade",
									"value": "false",
									"description": "true to delete associated readings"
								}
							]
						},
						"description": "Delete a device (with optional cascade deletion)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Readings",
			"item": [
				{
					"name": "Get Latest Readings",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/readings/latest?pi_id={{pi_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"readings",
								"latest"
							],
							"query": [
								{
									"key": "pi_id",
									"value": "{{pi_id}}",
									"description": "Required: Pi ID to get latest readings for"
								}
							]
						},
						"description": "Get the latest reading from each device for a specific Pi"
					},
					"response": []
				},
				{
					"name": "Get Readings (Time Range)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/readings?pi_id={{pi_id}}&device_id=1&from=2024-01-01T00:00:00Z&to=2024-01-31T23:59:59Z&limit=100&page=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"readings"
							],
							"query": [
								{
									"key": "pi_id",
									"value": "{{pi_id}}",
									"description": "Required: Pi ID"
								},
								{
									"key": "device_id",
									"value": "1",
									"description": "Optional: specific device ID"
								},
								{
									"key": "from",
									"value": "2024-01-01T00:00:00Z",
									"description": "Optional: start time (RFC3339 format)"
								},
								{
									"key": "to",
									"value": "2024-01-31T23:59:59Z",
									"description": "Optional: end time (RFC3339 format)"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "Maximum number of readings to return"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination"
								}
							]
						},
						"description": "Query readings with time range and filtering"
					},
					"response": []
				},
				{
					"name": "Get Device Readings",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/readings/pis/{{pi_id}}/devices/{{device_id}}?from=2024-01-01T00:00:00Z&to=2024-01-31T23:59:59Z&limit=50&page=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"readings",
								"pis",
								"{{pi_id}}",
								"devices",
								"{{device_id}}"
							],
							"query": [
								{
									"key": "from",
									"value": "2024-01-01T00:00:00Z",
									"description": "Optional: start time (RFC3339 format)"
								},
								{
									"key": "to",
									"value": "2024-01-31T23:59:59Z",
									"description": "Optional: end time (RFC3339 format)"
								},
								{
									"key": "limit",
									"value": "50",
									"description": "Maximum number of readings to return"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination"
								}
							]
						},
						"description": "Get readings for a specific device"
					},
					"response": []
				}
			]
		},
		{
			"name": "Statistics",
			"item": [
				{
					"name": "Get Summary Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stats/summary?pi_id={{pi_id}}&device_id=1&from=2024-01-01T00:00:00Z&to=2024-01-31T23:59:59Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stats",
								"summary"
							],
							"query": [
								{
									"key": "pi_id",
									"value": "{{pi_id}}",
									"description": "Optional: Pi ID to filter by"
								},
								{
									"key": "device_id",
									"value": "1",
									"description": "Optional: Device ID to filter by"
								},
								{
									"key": "from",
									"value": "2024-01-01T00:00:00Z",
									"description": "Optional: start time (RFC3339 format)"
								},
								{
									"key": "to",
									"value": "2024-01-31T23:59:59Z",
									"description": "Optional: end time (RFC3339 format)"
								}
							]
						},
						"description": "Get aggregate statistics for readings"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"description": "Base URL for the MQTT Server API"
		},
		{
			"key": "user_id",
			"value": "user_001",
			"description": "Sample user ID for testing"
		},
		{
			"key": "pi_id",
			"value": "pi_001",
			"description": "Sample Pi ID for testing"
		},
		{
			"key": "device_id",
			"value": "1",
			"description": "Sample device ID for testing"
		}
	]
}
